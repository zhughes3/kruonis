syntax = "proto3";
package models;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info : {
        title: "Timelines",
        version: "0.1.0"
    };
schemes:HTTPS;
consumes:"application/json";
produces:"application/json";
};

service TimelineService {
    rpc Signup(SignupRequest) returns (Error) {
        option(google.api.http) = {
            post: "/v1/users/signup"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Signup for an account."
        };
    }
    rpc Login(LoginRequest) returns (LoginResponse) {
        option(google.api.http) = {
            post: "/v1/users/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Login with an existing username and password. If successful, receive JWT token."
        };
    }
    rpc Refresh(RefreshRequest) returns (RefreshResponse) {
        option(google.api.http) = {
            get: "/v1/users/refresh"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Refresh bearer token; check if logged in."
        };
    }
    rpc Ping(PingRequest) returns (PingResponse) {
        option(google.api.http) = {
            get: "/v1/users/ping"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Check if user is logged in."
        };
    }
    rpc Me (MeRequest) returns (MeResponse) {
        option(google.api.http) = {
            get: "/v1/users/me"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get user account information, including timelines associated with account."
        };

    }
    rpc ReadGroups (ReadGroupsRequest) returns (ReadGroupsResponse) {
        option(google.api.http) = {
            get: "/v1/admin/groups"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a list of all timeline groups."
        };
    }
    rpc ReadTimelines (ReadTimelinesRequest) returns (ReadTimelinesResponse) {
        option(google.api.http) = {
            get: "/v1/admin/timelines"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a list of all timelines."
        };
    }
    rpc ReadUsers (ReadUsersRequest) returns (ReadUsersResponse) {
        option(google.api.http) = {
            get: "/v1/admin/users"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a list of all users."
        };
    }
    rpc CreateTimeline (Timeline) returns (Timeline) {
        option(google.api.http) = {
            post: "/v1/timelines"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Create a new timeline."
        };
    }
    rpc ReadTimeline (Filter) returns (Timeline) {
        option (google.api.http) = {
            get: "/v1/timelines/{id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a timeline."
        };
    }
    rpc UpdateTimeline (UpdateTimelineRequest) returns (Timeline) {
        option (google.api.http) = {
            put: "/v1/timelines/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Update a timeline."
        };
    }
    rpc DeleteTimeline (Filter) returns (Error) {
        option (google.api.http) = {
            delete: "/v1/timelines/{id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Delete a timeline."
        };
    }
    rpc ReadTimelineGroup (Filter) returns (TimelineGroup) {
        option (google.api.http) = {
            get: "/v1/groups/{id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a timeline group."
        };
    }
    rpc UpdateTimelineGroup (UpdateTimelineGroupRequest) returns (TimelineGroup) {
        option (google.api.http) = {
            put: "/v1/groups/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Update a timeline group."
        };
    }
    rpc DeleteTimelineGroup (Filter) returns (Error) {
        option (google.api.http) = {
            delete: "/v1/groups/{id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Delete a timeline group."
        };
    }
    rpc CreateTimelineEvent (TimelineEvent) returns (TimelineEvent) {
        option(google.api.http) = {
            post: "/v1/timelines/{id}/events"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Add a timeline event to a timeline."
        };
    }
    rpc ReadTimelineEvents(Filter) returns (ReadTimelineEventsResponse) {
        option (google.api.http) = {
            get: "/v1/timelines/{id}/events"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a timeline's events."
        };
    }
    rpc ReadTimelineEvent(Filter) returns (TimelineEvent) {
        option (google.api.http) = {
            get: "/v1/events/{id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Get a timeline event."
        };
    }
    rpc UpdateTimelineEvent(UpdateTimelineEventRequest) returns (TimelineEvent) {
        option (google.api.http) = {
            put: "/v1/events/{id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Update a timeline event."
        };
    }
    rpc DeleteTimelineEvent (Filter) returns (Error) {
        option (google.api.http) = {
            delete: "/v1/events/{id}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Delete a timeline event."
        };
    }
}

message Timeline {
    uint64 id = 1;
    uint64 group_id = 2;
    string title = 3;
    repeated string tags = 4;
    repeated TimelineEvent events = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
}

message TimelineGroup {
    uint64 id = 1;
    string title = 2;
    repeated Timeline timelines = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
    bool private = 6;
    uint64 user_id = 7;
    string uuid = 8;
}

message TimelineEvent {
    uint64 event_id = 1;
    uint64 id = 2;
    string title = 3;
    google.protobuf.Timestamp timestamp = 4;
    string description = 5;
    string content = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
    string image_url = 9;
}

message Filter {
    uint64 id = 1;
}

message Error {
    bool response = 1;
}

message UpdateTimelineEventRequest {
    uint64 id = 1;
    string title = 2;
    google.protobuf.Timestamp timestamp = 3;
    string description = 4;
    string content = 5;
}

message UpdateTimelineRequest {
    uint64 id = 1;
    string title = 2;
    repeated string tags = 3;
}

message UpdateTimelineGroupRequest{
    uint64 id = 1;
    string title = 2;
    bool private = 3;
}

message ReadTimelineEventsResponse{
    uint64 id = 1;
    repeated TimelineEvent events = 2;
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

// The response message containing the JWT token.
message LoginResponse {
    string token = 1;
}

// The user message containing the user.
message User {
    uint64 id = 1;
    string email = 2;
    bool   isAdmin  = 3;
    google.protobuf.Timestamp created_at = 4;
    google.protobuf.Timestamp updated_at = 5;
}

message SignupRequest {
    string email = 1;
    string password = 2;
}

message RefreshRequest {

}
message RefreshResponse {

}

message MeRequest {

}
message MeResponse {
    User user = 1;
    repeated TimelineGroup groups = 2;
}

message ReadGroupsRequest {

}
message ReadGroupsResponse {
    repeated TimelineGroup groups = 1;
}

message ReadTimelinesRequest {

}
message ReadTimelinesResponse {
    repeated Timeline timelines = 1;
}

message ReadUsersRequest {

}
message ReadUsersResponse {
    repeated User users = 1;
}
message PingRequest {

}
message PingResponse {
    bool response = 1;
}