// Code generated by MockGen. DO NOT EDIT.
// Source: models/timelines.pb.go

package models

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTimelineServiceClient is a mock of TimelineServiceClient interface
type MockTimelineServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineServiceClientMockRecorder
}

// MockTimelineServiceClientMockRecorder is the mock recorder for MockTimelineServiceClient
type MockTimelineServiceClientMockRecorder struct {
	mock *MockTimelineServiceClient
}

// NewMockTimelineServiceClient creates a new mock instance
func NewMockTimelineServiceClient(ctrl *gomock.Controller) *MockTimelineServiceClient {
	mock := &MockTimelineServiceClient{ctrl: ctrl}
	mock.recorder = &MockTimelineServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTimelineServiceClient) EXPECT() *MockTimelineServiceClientMockRecorder {
	return _m.recorder
}

// Signup mocks base method
func (_m *MockTimelineServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*Error, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Signup", _s...)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup
func (_mr *MockTimelineServiceClientMockRecorder) Signup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Signup", reflect.TypeOf((*MockTimelineServiceClient)(nil).Signup), _s...)
}

// Login mocks base method
func (_m *MockTimelineServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Login", _s...)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (_mr *MockTimelineServiceClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Login", reflect.TypeOf((*MockTimelineServiceClient)(nil).Login), _s...)
}

// Refresh mocks base method
func (_m *MockTimelineServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Refresh", _s...)
	ret0, _ := ret[0].(*RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh
func (_mr *MockTimelineServiceClientMockRecorder) Refresh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Refresh", reflect.TypeOf((*MockTimelineServiceClient)(nil).Refresh), _s...)
}

// Me mocks base method
func (_m *MockTimelineServiceClient) Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Me", _s...)
	ret0, _ := ret[0].(*MeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me
func (_mr *MockTimelineServiceClientMockRecorder) Me(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Me", reflect.TypeOf((*MockTimelineServiceClient)(nil).Me), _s...)
}

// CreateTimeline mocks base method
func (_m *MockTimelineServiceClient) CreateTimeline(ctx context.Context, in *Timeline, opts ...grpc.CallOption) (*Timeline, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateTimeline", _s...)
	ret0, _ := ret[0].(*Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeline indicates an expected call of CreateTimeline
func (_mr *MockTimelineServiceClientMockRecorder) CreateTimeline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateTimeline", reflect.TypeOf((*MockTimelineServiceClient)(nil).CreateTimeline), _s...)
}

// ReadTimeline mocks base method
func (_m *MockTimelineServiceClient) ReadTimeline(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Timeline, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReadTimeline", _s...)
	ret0, _ := ret[0].(*Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimeline indicates an expected call of ReadTimeline
func (_mr *MockTimelineServiceClientMockRecorder) ReadTimeline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimeline", reflect.TypeOf((*MockTimelineServiceClient)(nil).ReadTimeline), _s...)
}

// UpdateTimeline mocks base method
func (_m *MockTimelineServiceClient) UpdateTimeline(ctx context.Context, in *UpdateTimelineRequest, opts ...grpc.CallOption) (*Timeline, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateTimeline", _s...)
	ret0, _ := ret[0].(*Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimeline indicates an expected call of UpdateTimeline
func (_mr *MockTimelineServiceClientMockRecorder) UpdateTimeline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTimeline", reflect.TypeOf((*MockTimelineServiceClient)(nil).UpdateTimeline), _s...)
}

// DeleteTimeline mocks base method
func (_m *MockTimelineServiceClient) DeleteTimeline(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Error, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteTimeline", _s...)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimeline indicates an expected call of DeleteTimeline
func (_mr *MockTimelineServiceClientMockRecorder) DeleteTimeline(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTimeline", reflect.TypeOf((*MockTimelineServiceClient)(nil).DeleteTimeline), _s...)
}

// ReadTimelineGroup mocks base method
func (_m *MockTimelineServiceClient) ReadTimelineGroup(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*TimelineGroup, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReadTimelineGroup", _s...)
	ret0, _ := ret[0].(*TimelineGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimelineGroup indicates an expected call of ReadTimelineGroup
func (_mr *MockTimelineServiceClientMockRecorder) ReadTimelineGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimelineGroup", reflect.TypeOf((*MockTimelineServiceClient)(nil).ReadTimelineGroup), _s...)
}

// UpdateTimelineGroup mocks base method
func (_m *MockTimelineServiceClient) UpdateTimelineGroup(ctx context.Context, in *UpdateTimelineGroupRequest, opts ...grpc.CallOption) (*TimelineGroup, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateTimelineGroup", _s...)
	ret0, _ := ret[0].(*TimelineGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimelineGroup indicates an expected call of UpdateTimelineGroup
func (_mr *MockTimelineServiceClientMockRecorder) UpdateTimelineGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTimelineGroup", reflect.TypeOf((*MockTimelineServiceClient)(nil).UpdateTimelineGroup), _s...)
}

// DeleteTimelineGroup mocks base method
func (_m *MockTimelineServiceClient) DeleteTimelineGroup(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Error, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteTimelineGroup", _s...)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimelineGroup indicates an expected call of DeleteTimelineGroup
func (_mr *MockTimelineServiceClientMockRecorder) DeleteTimelineGroup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTimelineGroup", reflect.TypeOf((*MockTimelineServiceClient)(nil).DeleteTimelineGroup), _s...)
}

// CreateTimelineEvent mocks base method
func (_m *MockTimelineServiceClient) CreateTimelineEvent(ctx context.Context, in *TimelineEvent, opts ...grpc.CallOption) (*TimelineEvent, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateTimelineEvent", _s...)
	ret0, _ := ret[0].(*TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimelineEvent indicates an expected call of CreateTimelineEvent
func (_mr *MockTimelineServiceClientMockRecorder) CreateTimelineEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateTimelineEvent", reflect.TypeOf((*MockTimelineServiceClient)(nil).CreateTimelineEvent), _s...)
}

// ReadTimelineEvents mocks base method
func (_m *MockTimelineServiceClient) ReadTimelineEvents(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*ReadTimelineEventsResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReadTimelineEvents", _s...)
	ret0, _ := ret[0].(*ReadTimelineEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimelineEvents indicates an expected call of ReadTimelineEvents
func (_mr *MockTimelineServiceClientMockRecorder) ReadTimelineEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimelineEvents", reflect.TypeOf((*MockTimelineServiceClient)(nil).ReadTimelineEvents), _s...)
}

// ReadTimelineEvent mocks base method
func (_m *MockTimelineServiceClient) ReadTimelineEvent(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*TimelineEvent, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReadTimelineEvent", _s...)
	ret0, _ := ret[0].(*TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimelineEvent indicates an expected call of ReadTimelineEvent
func (_mr *MockTimelineServiceClientMockRecorder) ReadTimelineEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimelineEvent", reflect.TypeOf((*MockTimelineServiceClient)(nil).ReadTimelineEvent), _s...)
}

// UpdateTimelineEvent mocks base method
func (_m *MockTimelineServiceClient) UpdateTimelineEvent(ctx context.Context, in *UpdateTimelineEventRequest, opts ...grpc.CallOption) (*TimelineEvent, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateTimelineEvent", _s...)
	ret0, _ := ret[0].(*TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimelineEvent indicates an expected call of UpdateTimelineEvent
func (_mr *MockTimelineServiceClientMockRecorder) UpdateTimelineEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTimelineEvent", reflect.TypeOf((*MockTimelineServiceClient)(nil).UpdateTimelineEvent), _s...)
}

// DeleteTimelineEvent mocks base method
func (_m *MockTimelineServiceClient) DeleteTimelineEvent(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Error, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteTimelineEvent", _s...)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimelineEvent indicates an expected call of DeleteTimelineEvent
func (_mr *MockTimelineServiceClientMockRecorder) DeleteTimelineEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTimelineEvent", reflect.TypeOf((*MockTimelineServiceClient)(nil).DeleteTimelineEvent), _s...)
}

// MockTimelineServiceServer is a mock of TimelineServiceServer interface
type MockTimelineServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTimelineServiceServerMockRecorder
}

// MockTimelineServiceServerMockRecorder is the mock recorder for MockTimelineServiceServer
type MockTimelineServiceServerMockRecorder struct {
	mock *MockTimelineServiceServer
}

// NewMockTimelineServiceServer creates a new mock instance
func NewMockTimelineServiceServer(ctrl *gomock.Controller) *MockTimelineServiceServer {
	mock := &MockTimelineServiceServer{ctrl: ctrl}
	mock.recorder = &MockTimelineServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTimelineServiceServer) EXPECT() *MockTimelineServiceServerMockRecorder {
	return _m.recorder
}

// Signup mocks base method
func (_m *MockTimelineServiceServer) Signup(_param0 context.Context, _param1 *SignupRequest) (*Error, error) {
	ret := _m.ctrl.Call(_m, "Signup", _param0, _param1)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup
func (_mr *MockTimelineServiceServerMockRecorder) Signup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Signup", reflect.TypeOf((*MockTimelineServiceServer)(nil).Signup), arg0, arg1)
}

// Login mocks base method
func (_m *MockTimelineServiceServer) Login(_param0 context.Context, _param1 *LoginRequest) (*LoginResponse, error) {
	ret := _m.ctrl.Call(_m, "Login", _param0, _param1)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (_mr *MockTimelineServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Login", reflect.TypeOf((*MockTimelineServiceServer)(nil).Login), arg0, arg1)
}

// Refresh mocks base method
func (_m *MockTimelineServiceServer) Refresh(_param0 context.Context, _param1 *RefreshRequest) (*RefreshResponse, error) {
	ret := _m.ctrl.Call(_m, "Refresh", _param0, _param1)
	ret0, _ := ret[0].(*RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh
func (_mr *MockTimelineServiceServerMockRecorder) Refresh(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Refresh", reflect.TypeOf((*MockTimelineServiceServer)(nil).Refresh), arg0, arg1)
}

// Me mocks base method
func (_m *MockTimelineServiceServer) Me(_param0 context.Context, _param1 *MeRequest) (*MeResponse, error) {
	ret := _m.ctrl.Call(_m, "Me", _param0, _param1)
	ret0, _ := ret[0].(*MeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Me indicates an expected call of Me
func (_mr *MockTimelineServiceServerMockRecorder) Me(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Me", reflect.TypeOf((*MockTimelineServiceServer)(nil).Me), arg0, arg1)
}

// CreateTimeline mocks base method
func (_m *MockTimelineServiceServer) CreateTimeline(_param0 context.Context, _param1 *Timeline) (*Timeline, error) {
	ret := _m.ctrl.Call(_m, "CreateTimeline", _param0, _param1)
	ret0, _ := ret[0].(*Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeline indicates an expected call of CreateTimeline
func (_mr *MockTimelineServiceServerMockRecorder) CreateTimeline(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateTimeline", reflect.TypeOf((*MockTimelineServiceServer)(nil).CreateTimeline), arg0, arg1)
}

// ReadTimeline mocks base method
func (_m *MockTimelineServiceServer) ReadTimeline(_param0 context.Context, _param1 *Filter) (*Timeline, error) {
	ret := _m.ctrl.Call(_m, "ReadTimeline", _param0, _param1)
	ret0, _ := ret[0].(*Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimeline indicates an expected call of ReadTimeline
func (_mr *MockTimelineServiceServerMockRecorder) ReadTimeline(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimeline", reflect.TypeOf((*MockTimelineServiceServer)(nil).ReadTimeline), arg0, arg1)
}

// UpdateTimeline mocks base method
func (_m *MockTimelineServiceServer) UpdateTimeline(_param0 context.Context, _param1 *UpdateTimelineRequest) (*Timeline, error) {
	ret := _m.ctrl.Call(_m, "UpdateTimeline", _param0, _param1)
	ret0, _ := ret[0].(*Timeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimeline indicates an expected call of UpdateTimeline
func (_mr *MockTimelineServiceServerMockRecorder) UpdateTimeline(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTimeline", reflect.TypeOf((*MockTimelineServiceServer)(nil).UpdateTimeline), arg0, arg1)
}

// DeleteTimeline mocks base method
func (_m *MockTimelineServiceServer) DeleteTimeline(_param0 context.Context, _param1 *Filter) (*Error, error) {
	ret := _m.ctrl.Call(_m, "DeleteTimeline", _param0, _param1)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimeline indicates an expected call of DeleteTimeline
func (_mr *MockTimelineServiceServerMockRecorder) DeleteTimeline(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTimeline", reflect.TypeOf((*MockTimelineServiceServer)(nil).DeleteTimeline), arg0, arg1)
}

// ReadTimelineGroup mocks base method
func (_m *MockTimelineServiceServer) ReadTimelineGroup(_param0 context.Context, _param1 *Filter) (*TimelineGroup, error) {
	ret := _m.ctrl.Call(_m, "ReadTimelineGroup", _param0, _param1)
	ret0, _ := ret[0].(*TimelineGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimelineGroup indicates an expected call of ReadTimelineGroup
func (_mr *MockTimelineServiceServerMockRecorder) ReadTimelineGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimelineGroup", reflect.TypeOf((*MockTimelineServiceServer)(nil).ReadTimelineGroup), arg0, arg1)
}

// UpdateTimelineGroup mocks base method
func (_m *MockTimelineServiceServer) UpdateTimelineGroup(_param0 context.Context, _param1 *UpdateTimelineGroupRequest) (*TimelineGroup, error) {
	ret := _m.ctrl.Call(_m, "UpdateTimelineGroup", _param0, _param1)
	ret0, _ := ret[0].(*TimelineGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimelineGroup indicates an expected call of UpdateTimelineGroup
func (_mr *MockTimelineServiceServerMockRecorder) UpdateTimelineGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTimelineGroup", reflect.TypeOf((*MockTimelineServiceServer)(nil).UpdateTimelineGroup), arg0, arg1)
}

// DeleteTimelineGroup mocks base method
func (_m *MockTimelineServiceServer) DeleteTimelineGroup(_param0 context.Context, _param1 *Filter) (*Error, error) {
	ret := _m.ctrl.Call(_m, "DeleteTimelineGroup", _param0, _param1)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimelineGroup indicates an expected call of DeleteTimelineGroup
func (_mr *MockTimelineServiceServerMockRecorder) DeleteTimelineGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTimelineGroup", reflect.TypeOf((*MockTimelineServiceServer)(nil).DeleteTimelineGroup), arg0, arg1)
}

// CreateTimelineEvent mocks base method
func (_m *MockTimelineServiceServer) CreateTimelineEvent(_param0 context.Context, _param1 *TimelineEvent) (*TimelineEvent, error) {
	ret := _m.ctrl.Call(_m, "CreateTimelineEvent", _param0, _param1)
	ret0, _ := ret[0].(*TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimelineEvent indicates an expected call of CreateTimelineEvent
func (_mr *MockTimelineServiceServerMockRecorder) CreateTimelineEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateTimelineEvent", reflect.TypeOf((*MockTimelineServiceServer)(nil).CreateTimelineEvent), arg0, arg1)
}

// ReadTimelineEvents mocks base method
func (_m *MockTimelineServiceServer) ReadTimelineEvents(_param0 context.Context, _param1 *Filter) (*ReadTimelineEventsResponse, error) {
	ret := _m.ctrl.Call(_m, "ReadTimelineEvents", _param0, _param1)
	ret0, _ := ret[0].(*ReadTimelineEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimelineEvents indicates an expected call of ReadTimelineEvents
func (_mr *MockTimelineServiceServerMockRecorder) ReadTimelineEvents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimelineEvents", reflect.TypeOf((*MockTimelineServiceServer)(nil).ReadTimelineEvents), arg0, arg1)
}

// ReadTimelineEvent mocks base method
func (_m *MockTimelineServiceServer) ReadTimelineEvent(_param0 context.Context, _param1 *Filter) (*TimelineEvent, error) {
	ret := _m.ctrl.Call(_m, "ReadTimelineEvent", _param0, _param1)
	ret0, _ := ret[0].(*TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTimelineEvent indicates an expected call of ReadTimelineEvent
func (_mr *MockTimelineServiceServerMockRecorder) ReadTimelineEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadTimelineEvent", reflect.TypeOf((*MockTimelineServiceServer)(nil).ReadTimelineEvent), arg0, arg1)
}

// UpdateTimelineEvent mocks base method
func (_m *MockTimelineServiceServer) UpdateTimelineEvent(_param0 context.Context, _param1 *UpdateTimelineEventRequest) (*TimelineEvent, error) {
	ret := _m.ctrl.Call(_m, "UpdateTimelineEvent", _param0, _param1)
	ret0, _ := ret[0].(*TimelineEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimelineEvent indicates an expected call of UpdateTimelineEvent
func (_mr *MockTimelineServiceServerMockRecorder) UpdateTimelineEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateTimelineEvent", reflect.TypeOf((*MockTimelineServiceServer)(nil).UpdateTimelineEvent), arg0, arg1)
}

// DeleteTimelineEvent mocks base method
func (_m *MockTimelineServiceServer) DeleteTimelineEvent(_param0 context.Context, _param1 *Filter) (*Error, error) {
	ret := _m.ctrl.Call(_m, "DeleteTimelineEvent", _param0, _param1)
	ret0, _ := ret[0].(*Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTimelineEvent indicates an expected call of DeleteTimelineEvent
func (_mr *MockTimelineServiceServerMockRecorder) DeleteTimelineEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTimelineEvent", reflect.TypeOf((*MockTimelineServiceServer)(nil).DeleteTimelineEvent), arg0, arg1)
}
